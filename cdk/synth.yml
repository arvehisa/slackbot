Resources:
  Vpc8378EB38:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: slackbot-vpc
    Metadata:
      aws:cdk:path: CdkStack/Vpc/Resource
  VpcPublicSubnet1Subnet5C2D37C4:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: 10.0.0.0/18
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: CdkStack/Vpc/PublicSubnet1
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: CdkStack/Vpc/PublicSubnet1/Subnet
  VpcPublicSubnet1RouteTable6C95E38E:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: CdkStack/Vpc/PublicSubnet1
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: CdkStack/Vpc/PublicSubnet1/RouteTable
  VpcPublicSubnet1RouteTableAssociation97140677:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VpcPublicSubnet1RouteTable6C95E38E
      SubnetId:
        Ref: VpcPublicSubnet1Subnet5C2D37C4
    Metadata:
      aws:cdk:path: CdkStack/Vpc/PublicSubnet1/RouteTableAssociation
  VpcPublicSubnet1DefaultRoute3DA9E72A:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VpcIGWD7BA715C
      RouteTableId:
        Ref: VpcPublicSubnet1RouteTable6C95E38E
    DependsOn:
      - VpcVPCGWBF912B6E
    Metadata:
      aws:cdk:path: CdkStack/Vpc/PublicSubnet1/DefaultRoute
  VpcPublicSubnet1EIPD7E02669:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: CdkStack/Vpc/PublicSubnet1
    Metadata:
      aws:cdk:path: CdkStack/Vpc/PublicSubnet1/EIP
  VpcPublicSubnet1NATGateway4D7517AA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - VpcPublicSubnet1EIPD7E02669
          - AllocationId
      SubnetId:
        Ref: VpcPublicSubnet1Subnet5C2D37C4
      Tags:
        - Key: Name
          Value: CdkStack/Vpc/PublicSubnet1
    DependsOn:
      - VpcPublicSubnet1DefaultRoute3DA9E72A
      - VpcPublicSubnet1RouteTableAssociation97140677
    Metadata:
      aws:cdk:path: CdkStack/Vpc/PublicSubnet1/NATGateway
  VpcPublicSubnet2Subnet691E08A3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: 10.0.64.0/18
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: CdkStack/Vpc/PublicSubnet2
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: CdkStack/Vpc/PublicSubnet2/Subnet
  VpcPublicSubnet2RouteTable94F7E489:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: CdkStack/Vpc/PublicSubnet2
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: CdkStack/Vpc/PublicSubnet2/RouteTable
  VpcPublicSubnet2RouteTableAssociationDD5762D8:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VpcPublicSubnet2RouteTable94F7E489
      SubnetId:
        Ref: VpcPublicSubnet2Subnet691E08A3
    Metadata:
      aws:cdk:path: CdkStack/Vpc/PublicSubnet2/RouteTableAssociation
  VpcPublicSubnet2DefaultRoute97F91067:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VpcIGWD7BA715C
      RouteTableId:
        Ref: VpcPublicSubnet2RouteTable94F7E489
    DependsOn:
      - VpcVPCGWBF912B6E
    Metadata:
      aws:cdk:path: CdkStack/Vpc/PublicSubnet2/DefaultRoute
  VpcPublicSubnet2EIP3C605A87:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: CdkStack/Vpc/PublicSubnet2
    Metadata:
      aws:cdk:path: CdkStack/Vpc/PublicSubnet2/EIP
  VpcPublicSubnet2NATGateway9182C01D:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - VpcPublicSubnet2EIP3C605A87
          - AllocationId
      SubnetId:
        Ref: VpcPublicSubnet2Subnet691E08A3
      Tags:
        - Key: Name
          Value: CdkStack/Vpc/PublicSubnet2
    DependsOn:
      - VpcPublicSubnet2DefaultRoute97F91067
      - VpcPublicSubnet2RouteTableAssociationDD5762D8
    Metadata:
      aws:cdk:path: CdkStack/Vpc/PublicSubnet2/NATGateway
  VpcPrivateSubnet1Subnet536B997A:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: 10.0.128.0/18
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: CdkStack/Vpc/PrivateSubnet1
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: CdkStack/Vpc/PrivateSubnet1/Subnet
  VpcPrivateSubnet1RouteTableB2C5B500:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: CdkStack/Vpc/PrivateSubnet1
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: CdkStack/Vpc/PrivateSubnet1/RouteTable
  VpcPrivateSubnet1RouteTableAssociation70C59FA6:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VpcPrivateSubnet1RouteTableB2C5B500
      SubnetId:
        Ref: VpcPrivateSubnet1Subnet536B997A
    Metadata:
      aws:cdk:path: CdkStack/Vpc/PrivateSubnet1/RouteTableAssociation
  VpcPrivateSubnet1DefaultRouteBE02A9ED:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: VpcPublicSubnet1NATGateway4D7517AA
      RouteTableId:
        Ref: VpcPrivateSubnet1RouteTableB2C5B500
    Metadata:
      aws:cdk:path: CdkStack/Vpc/PrivateSubnet1/DefaultRoute
  VpcPrivateSubnet2Subnet3788AAA1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: 10.0.192.0/18
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: CdkStack/Vpc/PrivateSubnet2
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: CdkStack/Vpc/PrivateSubnet2/Subnet
  VpcPrivateSubnet2RouteTableA678073B:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: CdkStack/Vpc/PrivateSubnet2
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: CdkStack/Vpc/PrivateSubnet2/RouteTable
  VpcPrivateSubnet2RouteTableAssociationA89CAD56:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VpcPrivateSubnet2RouteTableA678073B
      SubnetId:
        Ref: VpcPrivateSubnet2Subnet3788AAA1
    Metadata:
      aws:cdk:path: CdkStack/Vpc/PrivateSubnet2/RouteTableAssociation
  VpcPrivateSubnet2DefaultRoute060D2087:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: VpcPublicSubnet2NATGateway9182C01D
      RouteTableId:
        Ref: VpcPrivateSubnet2RouteTableA678073B
    Metadata:
      aws:cdk:path: CdkStack/Vpc/PrivateSubnet2/DefaultRoute
  VpcIGWD7BA715C:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: slackbot-vpc
    Metadata:
      aws:cdk:path: CdkStack/Vpc/IGW
  VpcVPCGWBF912B6E:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: VpcIGWD7BA715C
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: CdkStack/Vpc/VPCGW
  VpcRestrictDefaultSecurityGroupCustomResourceC73DA2BE:
    Type: Custom::VpcRestrictDefaultSG
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CustomVpcRestrictDefaultSGCustomResourceProviderHandlerDC833E5E
          - Arn
      DefaultSecurityGroupId:
        Fn::GetAtt:
          - Vpc8378EB38
          - DefaultSecurityGroup
      Account:
        Ref: AWS::AccountId
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: CdkStack/Vpc/RestrictDefaultSecurityGroupCustomResource/Default
  CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: Inline
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:AuthorizeSecurityGroupEgress
                  - ec2:RevokeSecurityGroupIngress
                  - ec2:RevokeSecurityGroupEgress
                Resource:
                  - Fn::Join:
                      - ""
                      - - "arn:"
                        - Ref: AWS::Partition
                        - ":ec2:"
                        - Ref: AWS::Region
                        - ":"
                        - Ref: AWS::AccountId
                        - :security-group/
                        - Fn::GetAtt:
                            - Vpc8378EB38
                            - DefaultSecurityGroup
    Metadata:
      aws:cdk:path: CdkStack/Custom::VpcRestrictDefaultSGCustomResourceProvider/Role
  CustomVpcRestrictDefaultSGCustomResourceProviderHandlerDC833E5E:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 7f18a11296f35510ee16538afec983ed6312e12afbf81b777089a9f8e34e2474.zip
      Timeout: 900
      MemorySize: 128
      Handler: __entrypoint__.handler
      Role:
        Fn::GetAtt:
          - CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0
          - Arn
      Runtime: nodejs18.x
      Description: Lambda function for removing all inbound/outbound rules from the VPC default security group
    DependsOn:
      - CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0
    Metadata:
      aws:cdk:path: CdkStack/Custom::VpcRestrictDefaultSGCustomResourceProvider/Handler
      aws:asset:path: asset.7f18a11296f35510ee16538afec983ed6312e12afbf81b777089a9f8e34e2474
      aws:asset:property: Code
  VpcConnectorSecurityGroup33FAF25D:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: CdkStack/VpcConnector/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: CdkStack/VpcConnector/SecurityGroup/Resource
  VpcConnectorE3A78531:
    Type: AWS::AppRunner::VpcConnector
    Properties:
      SecurityGroups:
        - Fn::GetAtt:
            - VpcConnectorSecurityGroup33FAF25D
            - GroupId
      Subnets:
        - Ref: VpcPrivateSubnet1Subnet536B997A
        - Ref: VpcPrivateSubnet2Subnet3788AAA1
      VpcConnectorName: apprunner-vpc-connector
    Metadata:
      aws:cdk:path: CdkStack/VpcConnector/Resource
  ECRRepositoryF3A3832E:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: slackbot-ecr
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: CdkStack/ECRRepository/Resource
  ServiceInstanceRoleDFA90CEC:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: tasks.apprunner.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: CdkStack/Service/InstanceRole/Resource
  ServiceDBC79909:
    Type: AWS::AppRunner::Service
    Properties:
      InstanceConfiguration:
        InstanceRoleArn:
          Fn::GetAtt:
            - ServiceInstanceRoleDFA90CEC
            - Arn
      NetworkConfiguration:
        EgressConfiguration:
          EgressType: VPC
          VpcConnectorArn:
            Fn::GetAtt:
              - VpcConnectorE3A78531
              - VpcConnectorArn
      ServiceName: slackbot-rag-pgvector
      SourceConfiguration:
        AuthenticationConfiguration: {}
        ImageRepository:
          ImageConfiguration:
            Port: "8080"
          ImageIdentifier:
            Fn::Join:
              - ""
              - - Fn::Select:
                    - 4
                    - Fn::Split:
                        - ":"
                        - Fn::GetAtt:
                            - ECRRepositoryF3A3832E
                            - Arn
                - .dkr.ecr.
                - Fn::Select:
                    - 3
                    - Fn::Split:
                        - ":"
                        - Fn::GetAtt:
                            - ECRRepositoryF3A3832E
                            - Arn
                - "."
                - Ref: AWS::URLSuffix
                - /
                - Ref: ECRRepositoryF3A3832E
                - :latest
          ImageRepositoryType: ECR_PUBLIC
    Metadata:
      aws:cdk:path: CdkStack/Service/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/21RwW7CMAz9Fu5paDmgHYfQhLigqkxcpzT1wNAmUeIUoSr/voQC3aSdnt/zs2M7C17kSz7kM3F1mWwuWYs1H/Yk5IVF6WsAueDDwUi2/laHcs1KX7co975WQEmbokp7gk9RtzDpk7ZyTksUhFq9zCn42JYJdoI2guAqbqy02MdwarxVBDbGT8M4yYOtKM566kAR24P0Fum2sdqb+wy/hcCEMdYrBZYPqYWRax2ZJG1Hs+1RQmAgo6ECox3G1P25iQWGootpPW6ZMARWgdPeyih5R7qbaCr9N1Va3WMDlsW7AMV7H1Edkz/O1GC6UmB5JlpzEjyfvT9+Z57wtcYjPfzZ5LlGYEo3wM9u3hdvvFjyYnZ2iFksJeyAVyP+AMHsMlcAAgAA
    Metadata:
      aws:cdk:path: CdkStack/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2
Parameters:
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]
Rules:
  CheckBootstrapVersion:
    Assertions:
      - Assert:
          Fn::Not:
            - Fn::Contains:
                - - "1"
                  - "2"
                  - "3"
                  - "4"
                  - "5"
                - Ref: BootstrapVersion
        AssertDescription: CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.

